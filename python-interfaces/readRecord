#! /usr/bin/python3.5m

#
#   Copyright (C) 2016-2017, Jaguar Land Rover. All Rights Reserved.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this file,
#   You can obtain one at http://mozilla.org/MPL/2.0/.
#

from getopt import *
import sys

from vsi_py import *


def usage():
    print ( """

Usage:

  readRecord options

where \"options\" can be any combination of:

  -d: | --domain      Define the domain ID
  -h  | --help        Display this help message
  -n: | --signalName  Define the signal name
  -o  | --oldest      Retrieve the oldest data block
  -s: | --signal      Define the signal ID
  -V  | --verbose     Set \"verbose\" output mode
  -w  | --wait        Wait for data if there is none currently

All of the options denoted with a \":\" require an argument value

""" )


def main():
    try:
        opts, args = getopt(sys.argv[1:], "d:hn:os:Vw", ["help", "output="])

    except GetoptError as err:
        # print help information and exit:
        print(err)  # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    domain     = 1
    signal     = 0
    signalName = ""
    verbose    = False
    length     = 0
    value      = 0
    oldest     = False
    wait       = False

    for option, arg in opts:

        if option in ("-d", "--domain"):
            domain = arg

        elif option in ("-h", "--help"):
            usage()
            sys.exit()

        elif option in ("-n", "--name"):
            signalName = arg

        elif option in ("-o", "--oldest"):
            oldest = True

        elif option in ("-s", "--signal"):
            signal = arg

        elif option in ("-V", "--verbose"):
            verbose = True
            print ( "Verbose output mode set" )

        elif option in ("-w", "--wait"):
            wait = True
            print ( "Wait for data mode set" )

        else:
            assert False, "unhandled option"

    if verbose:
        print ( "\nOptions found:" )
        print ( "  domain:", domain )
        print ( "  signal:", signal )
        print ( "    name:", signalName )
        print ( "  oldest:", oldest )
        print ( "    wait:", wait )

    status, length, value, strValue = getSignalData ( int(domain), \
            int(signal), signalName, int(wait), int(oldest) )

    if ( status != 0 ):
        if ( status == 61 ):
            print ( "No Data available for signal." );
        else:
            print ( "Error: Signal fetch error:", status );
    else:
        if ( length == 8 ):
            print ( "Signal fetch returned number", value )
        else:
            print ( "Signal fetch returned string", strValue )


if __name__ == "__main__":
    main()
