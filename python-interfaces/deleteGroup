#! /usr/bin/python3.5m

#
#   Copyright (C) 2016-2017, Jaguar Land Rover. All Rights Reserved.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this file,
#   You can obtain one at http://mozilla.org/MPL/2.0/.
#

from getopt import *
import sys

from vsi_py import *


def usage():
    print ( """

Usage:

  deleteGroup options

where \"options\" can be any combination of:

  -g: | --group       The group ID to be deleted
  -h  | --help        Display this help message
  -V  | --verbose     Set \"verbose\" output mode

All of the options denoted with a \":\" require an argument value

""" )


#
#   m a i n
#
def main():

    #
    #   Go parse the command line input options.
    #
    try:
        opts, args = getopt(sys.argv[1:], "g:hV", ["help", "output="])

    #
    #   If we get any errors, report them and quit.
    #
    except GetoptError as err:
        #
        #   The following will print something like "option -a not recognized"
        #
        print(err)

        #
        #   Print the "usage" message and quit.
        #
        usage()
        sys.exit(2)

    #
    #   Initialize the parameter variables.
    #
    group   = 0
    verbose = False

    #
    #   For each command line option the user supplied...
    #
    for option, arg in opts:

        #
        #   If this is a "group" option, save the value specified.
        #
        if option in ("-g", "--group"):
            group = arg
            print ( "Using group ID:", group )
        #
        #   If this is a "help" option, display the "usage" message and quit.
        #
        elif option in ("-h", "--help"):
            usage()
            sys.exit()
        #
        #   If this is a "verbose" option, set the "verbose" flag.
        #
        elif option in ("-V", "--verbose"):
            verbose = True
            print ( "Verbose output mode set" )
        #
        #   If this is anything else, it's an error so print an error message
        #   and quit.
        #
        else:
            assert False, "unhandled option"

    #
    #   If we are in verbose mode, display the values of all of the
    #   parameters.
    #
    if verbose:
        print ( "\nOptions found:" )
        print ( "   group:", group )
    #
    #   Go create the requested signal group.
    #
    status = deleteSignalGroup ( int(group) )

    #
    #
    #
    if ( status != 0 ):
        print ( "Error: Delete signal group error:", status )
    else:
        if verbose:
            print ( "Signal group", group, "successfully deleted." )


#
#   If this file is called directly, go execute the main function.
#
if __name__ == "__main__":
    main()
